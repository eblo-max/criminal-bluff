/**
 * ProfileScreen Component
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
class ProfileScreen {
  constructor(apiService, uiService, telegramService) {
    this.apiService = apiService;
    this.uiService = uiService;
    this.telegramService = telegramService;
    this.container = document.getElementById('profile-screen');
    this.userNameElement = this.container.querySelector('#user-name');
    this.userAvatarElement = this.container.querySelector('#user-avatar');
    this.gamesPlayedElement = this.container.querySelector('#games-played');
    this.accuracyElement = this.container.querySelector('#accuracy');
    this.bestStreakElement = this.container.querySelector('#profile-best-streak');
    this.rankPositionElement = this.container.querySelector('#rank-position');
    this.achievementsListElement = this.container.querySelector('#achievements-list');
    this.statsChartContainer = this.container.querySelector('.stats-chart-container');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è
   */
  async init() {
    try {
      this.uiService.showLoading();
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
      const profileData = await this.apiService.getUserProfile();
      
      if (profileData) {
        this.renderProfileData(profileData);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
        const rankPosition = await this.apiService.getUserPosition();
        this.renderRankPosition(rankPosition);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const statsData = await this.apiService.getUserStats();
        this.renderStatsChart(statsData);
      } else {
        this.uiService.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è');
      }
      
      this.uiService.hideLoading();
    } catch (error) {
      console.error('Error loading profile:', error);
      this.uiService.hideLoading();
      this.uiService.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è');
    }
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
   * @param {Object} profileData - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  renderProfileData(profileData) {
    // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.userNameElement.textContent = profileData.username || '–ò–≥—Ä–æ–∫';
    
    // –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (profileData.photoUrl) {
      this.userAvatarElement.src = profileData.photoUrl;
      this.userAvatarElement.style.display = 'block';
    } else {
      this.userAvatarElement.style.display = 'none';
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä
    this.gamesPlayedElement.textContent = profileData.gamesPlayed || 0;
    
    // –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤
    const accuracy = profileData.gamesPlayed > 0 
      ? Math.round((profileData.correctAnswers / (profileData.gamesPlayed * 5)) * 100) 
      : 0;
    this.accuracyElement.textContent = `${accuracy}%`;
    
    // –õ—É—á—à–∞—è —Å–µ—Ä–∏—è
    this.bestStreakElement.textContent = profileData.bestStreak || 0;
    
    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    this.renderAchievements(profileData.achievements);
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Array} achievements - –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   */
  renderAchievements(achievements) {
    // –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const allAchievements = [
      {
        name: '–ù–æ–≤–∏—á–æ–∫',
        description: '–°—ã–≥—Ä–∞—Ç—å –ø–µ—Ä–≤—É—é –∏–≥—Ä—É',
        icon: 'üéÆ'
      },
      {
        name: '–≠–∫—Å–ø–µ—Ä—Ç',
        description: '10 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥',
        icon: 'üß†'
      },
      {
        name: '–ú–∞—Å—Ç–µ—Ä –¥–µ–¥—É–∫—Ü–∏–∏',
        description: '100% —Ç–æ—á–Ω–æ—Å—Ç—å –≤ 5 –∏–≥—Ä–∞—Ö –ø–æ–¥—Ä—è–¥',
        icon: 'üîç'
      },
      {
        name: '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –¥–µ—Ç–µ–∫—Ç–∏–≤',
        description: '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã',
        icon: '‚ö°'
      },
      {
        name: '–°–µ—Ä–∏–π–Ω—ã–π –∏–≥—Ä–æ–∫',
        description: '100 —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä',
        icon: 'üèÜ'
      }
    ];
    
    this.achievementsListElement.innerHTML = '';
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –ø–æ–º–µ—Ç–∫–æ–π "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ" –∏–ª–∏ "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ"
    allAchievements.forEach(achievement => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–µ–Ω–æ –ª–∏ —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
      const isUnlocked = Array.isArray(achievements) && 
        achievements.some(a => a.name === achievement.name);
      
      const achievementItem = document.createElement('div');
      achievementItem.className = `achievement-item ${isUnlocked ? '' : 'achievement-locked'}`;
      
      achievementItem.innerHTML = `
        <div class="achievement-icon">${achievement.icon}</div>
        <div class="achievement-info">
          <div class="achievement-name">${achievement.name}</div>
          <div class="achievement-description">${achievement.description}</div>
          ${isUnlocked ? '<div class="achievement-unlocked">‚úì –ü–æ–ª—É—á–µ–Ω–æ</div>' : ''}
        </div>
      `;
      
      this.achievementsListElement.appendChild(achievementItem);
    });
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
   * @param {Object} rankData - –î–∞–Ω–Ω—ã–µ –æ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
   */
  renderRankPosition(rankData) {
    if (!rankData) {
      this.rankPositionElement.textContent = 'N/A';
      return;
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ
    this.rankPositionElement.textContent = rankData.global 
      ? `#${rankData.global}` 
      : 'N/A';
    
    // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –≤ –¥—Ä—É–≥–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö (–Ω–µ–¥–µ–ª—å–Ω–æ–º, –¥–Ω–µ–≤–Ω–æ–º)
    const rankInfo = document.createElement('div');
    rankInfo.className = 'rank-info';
    rankInfo.innerHTML = `
      <div class="rank-detail">
        <span class="rank-label">–ì–ª–æ–±–∞–ª—å–Ω—ã–π:</span>
        <span class="rank-value">${rankData.global ? `#${rankData.global}` : 'N/A'}</span>
      </div>
      <div class="rank-detail">
        <span class="rank-label">–ù–µ–¥–µ–ª—å–Ω—ã–π:</span>
        <span class="rank-value">${rankData.weekly ? `#${rankData.weekly}` : 'N/A'}</span>
      </div>
      <div class="rank-detail">
        <span class="rank-label">–î–Ω–µ–≤–Ω–æ–π:</span>
        <span class="rank-value">${rankData.daily ? `#${rankData.daily}` : 'N/A'}</span>
      </div>
    `;
    
    const container = this.rankPositionElement.parentElement;
    const existingInfo = container.querySelector('.rank-info');
    
    if (existingInfo) {
      container.replaceChild(rankInfo, existingInfo);
    } else {
      container.appendChild(rankInfo);
    }
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   * @param {Object} statsData - –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  renderStatsChart(statsData) {
    if (!statsData) {
      this.statsChartContainer.innerHTML = '<p class="text-secondary">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</p>';
      return;
    }
    
    this.statsChartContainer.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (statsData.categoryDistribution) {
      const categoryChart = document.createElement('div');
      categoryChart.className = 'stats-chart category-chart';
      categoryChart.innerHTML = `
        <h4>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h4>
        <div class="chart-container" id="category-chart"></div>
      `;
      this.statsChartContainer.appendChild(categoryChart);
      
      this.renderPieChart('category-chart', statsData.categoryDistribution);
    }
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if (statsData.difficultyDistribution) {
      const difficultyChart = document.createElement('div');
      difficultyChart.className = 'stats-chart difficulty-chart';
      difficultyChart.innerHTML = `
        <h4>–°–ª–æ–∂–Ω–æ—Å—Ç—å</h4>
        <div class="chart-container" id="difficulty-chart"></div>
      `;
      this.statsChartContainer.appendChild(difficultyChart);
      
      this.renderPieChart('difficulty-chart', statsData.difficultyDistribution);
    }
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –Ω–µ–¥–µ–ª—è–º
    if (statsData.weeklyActivity) {
      const activityChart = document.createElement('div');
      activityChart.className = 'stats-chart activity-chart';
      activityChart.innerHTML = `
        <h4>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h4>
        <div class="chart-container" id="activity-chart"></div>
      `;
      this.statsChartContainer.appendChild(activityChart);
      
      this.renderBarChart('activity-chart', statsData.weeklyActivity);
    }
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
   * @param {String} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
   */
  renderPieChart(containerId, data) {
    const container = document.getElementById(containerId);
    
    // –°–æ–∑–¥–∞–µ–º —Ö–æ–ª—Å—Ç SVG –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svg.setAttribute('viewBox', '0 0 100 100');
    container.appendChild(svg);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const total = Object.values(data).reduce((sum, value) => sum + value, 0);
    const items = Object.entries(data).map(([label, value]) => ({
      label,
      value,
      percentage: (value / total) * 100
    }));
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞
    const colors = ['#FF6B6B', '#4ECDC4', '#FFD166', '#F7FFF7', '#A2D729', '#1A535C'];
    
    // –†–∏—Å—É–µ–º —Å–µ–∫—Ç–æ—Ä—ã
    let startAngle = 0;
    items.forEach((item, index) => {
      const angle = (item.percentage / 100) * 360;
      const endAngle = startAngle + angle;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥—É–≥–∏
      const x1 = 50 + 40 * Math.cos(Math.PI * startAngle / 180);
      const y1 = 50 + 40 * Math.sin(Math.PI * startAngle / 180);
      const x2 = 50 + 40 * Math.cos(Math.PI * endAngle / 180);
      const y2 = 50 + 40 * Math.sin(Math.PI * endAngle / 180);
      
      // –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–µ–∫—Ç–æ—Ä–∞
      const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      const largeArcFlag = angle > 180 ? 1 : 0;
      
      path.setAttribute('d', `M50,50 L${x1},${y1} A40,40 0 ${largeArcFlag},1 ${x2},${y2} Z`);
      path.setAttribute('fill', colors[index % colors.length]);
      
      svg.appendChild(path);
      
      startAngle = endAngle;
    });
    
    // –°–æ–∑–¥–∞–µ–º –ª–µ–≥–µ–Ω–¥—É
    const legend = document.createElement('div');
    legend.className = 'chart-legend';
    
    items.forEach((item, index) => {
      const legendItem = document.createElement('div');
      legendItem.className = 'legend-item';
      legendItem.innerHTML = `
        <span class="legend-color" style="background-color: ${colors[index % colors.length]}"></span>
        <span class="legend-label">${item.label}</span>
        <span class="legend-value">${item.percentage.toFixed(1)}%</span>
      `;
      legend.appendChild(legendItem);
    });
    
    container.appendChild(legend);
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
   * @param {String} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
   */
  renderBarChart(containerId, data) {
    const container = document.getElementById(containerId);
    
    // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    const maxValue = Math.max(...Object.values(data));
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
    const chartContainer = document.createElement('div');
    chartContainer.className = 'bar-chart-container';
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    Object.entries(data).forEach(([label, value]) => {
      const barContainer = document.createElement('div');
      barContainer.className = 'bar-container';
      
      const bar = document.createElement('div');
      bar.className = 'bar';
      bar.style.height = `${(value / maxValue) * 100}%`;
      
      const barLabel = document.createElement('div');
      barLabel.className = 'bar-label';
      barLabel.textContent = label;
      
      const barValue = document.createElement('div');
      barValue.className = 'bar-value';
      barValue.textContent = value;
      
      barContainer.appendChild(bar);
      barContainer.appendChild(barLabel);
      barContainer.appendChild(barValue);
      
      chartContainer.appendChild(barContainer);
    });
    
    container.appendChild(chartContainer);
  }
}

export default ProfileScreen; 