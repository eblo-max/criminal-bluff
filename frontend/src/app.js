/**
 * –ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–π –ë–ª–µ—Ñ - Telegram Mini App
 * –û—Å–Ω–æ–≤–Ω–æ–π JavaScript —Ñ–∞–π–ª
 */

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
import { ApiService } from './services/apiService.js';
import { GameService } from './services/gameService.js';
import { UiService } from './services/uiService.js';
import { TelegramService } from './services/telegramService.js';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
  const apiService = new ApiService();
  const telegramService = new TelegramService();
  const uiService = new UiService();
  const gameService = new GameService(apiService, uiService);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
  telegramService.init();
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
  const startScreen = document.getElementById('start-screen');
  const gameScreen = document.getElementById('game-screen');
  const answerResultScreen = document.getElementById('answer-result-screen');
  const gameResultScreen = document.getElementById('game-result-screen');
  const profileScreen = document.getElementById('profile-screen');
  const leaderboardScreen = document.getElementById('leaderboard-screen');
  
  const startGameBtn = document.getElementById('start-game-btn');
  const profileBtn = document.getElementById('profile-btn');
  const leaderboardBtn = document.getElementById('leaderboard-btn');
  const profileBackBtn = document.getElementById('profile-back-btn');
  const leaderboardBackBtn = document.getElementById('leaderboard-back-btn');
  const playAgainBtn = document.getElementById('play-again-btn');
  const shareResultBtn = document.getElementById('share-result-btn');
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  startGameBtn.addEventListener('click', () => {
    uiService.showScreen(gameScreen);
    gameService.startGame();
  });
  
  profileBtn.addEventListener('click', () => {
    uiService.showScreen(profileScreen);
    loadProfile();
  });
  
  leaderboardBtn.addEventListener('click', () => {
    uiService.showScreen(leaderboardScreen);
    loadLeaderboard('daily');
  });
  
  profileBackBtn.addEventListener('click', () => {
    uiService.showScreen(startScreen);
  });
  
  leaderboardBackBtn.addEventListener('click', () => {
    uiService.showScreen(startScreen);
  });
  
  playAgainBtn.addEventListener('click', () => {
    uiService.showScreen(gameScreen);
    gameService.startGame();
  });
  
  shareResultBtn.addEventListener('click', () => {
    telegramService.shareResults(gameService.getGameResults());
  });
  
  // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
  document.querySelector('.options-container').addEventListener('click', (e) => {
    if (e.target.classList.contains('option')) {
      const optionIndex = parseInt(e.target.getAttribute('data-index'));
      gameService.submitAnswer(optionIndex);
    }
  });
  
  // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∞—è –∏—Å—Ç–æ—Ä–∏—è"
  document.querySelector('.next-btn').addEventListener('click', () => {
    gameService.nextStory();
  });
  
  // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞
  document.querySelector('.leaderboard-tabs').addEventListener('click', (e) => {
    if (e.target.classList.contains('tab-btn')) {
      const period = e.target.getAttribute('data-period');
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
      document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
      });
      e.target.classList.add('active');
      
      // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
      loadLeaderboard(period);
    }
  });
  
  /**
   * –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async function loadProfile() {
    try {
      uiService.showLoading();
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
      const profile = await apiService.getUserProfile();
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
      if (profile) {
        document.getElementById('user-name').textContent = profile.username || '–ò–≥—Ä–æ–∫';
        document.getElementById('games-played').textContent = profile.gamesPlayed || 0;
        
        const accuracy = profile.gamesPlayed > 0 
          ? Math.round((profile.correctAnswers / (profile.gamesPlayed * 5)) * 100) 
          : 0;
        document.getElementById('accuracy').textContent = `${accuracy}%`;
        
        document.getElementById('profile-best-streak').textContent = profile.bestStreak || 0;
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
        const rankPosition = await apiService.getUserPosition();
        document.getElementById('rank-position').textContent = rankPosition ? `#${rankPosition}` : 'N/A';
        
        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        if (profile.achievements && profile.achievements.length > 0) {
          renderAchievements(profile.achievements);
        } else {
          document.getElementById('achievements-list').innerHTML = '<p class="text-secondary">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</p>';
        }
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (telegramService.getUserInfo() && telegramService.getUserInfo().photo_url) {
          document.getElementById('user-avatar').src = telegramService.getUserInfo().photo_url;
        }
      }
      
      uiService.hideLoading();
    } catch (error) {
      console.error('Error loading profile:', error);
      uiService.hideLoading();
      uiService.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
  
  /**
   * –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   * @param {Array} achievements - –º–∞—Å—Å–∏–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  function renderAchievements(achievements) {
    const achievementsList = document.getElementById('achievements-list');
    achievementsList.innerHTML = '';
    
    // –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const allAchievements = [
      {
        name: '–ù–æ–≤–∏—á–æ–∫',
        description: '–°—ã–≥—Ä–∞—Ç—å –ø–µ—Ä–≤—É—é –∏–≥—Ä—É',
        icon: 'üéÆ'
      },
      {
        name: '–≠–∫—Å–ø–µ—Ä—Ç',
        description: '10 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥',
        icon: 'üß†'
      },
      {
        name: '–ú–∞—Å—Ç–µ—Ä –¥–µ–¥—É–∫—Ü–∏–∏',
        description: '100% —Ç–æ—á–Ω–æ—Å—Ç—å –≤ 5 –∏–≥—Ä–∞—Ö –ø–æ–¥—Ä—è–¥',
        icon: 'üîç'
      },
      {
        name: '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –¥–µ—Ç–µ–∫—Ç–∏–≤',
        description: '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã',
        icon: '‚ö°'
      },
      {
        name: '–°–µ—Ä–∏–π–Ω—ã–π –∏–≥—Ä–æ–∫',
        description: '100 —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä',
        icon: 'üèÜ'
      }
    ];
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –ø–æ–º–µ—Ç–∫–æ–π "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ" –∏–ª–∏ "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ"
    allAchievements.forEach(achievement => {
      const isUnlocked = achievements.some(a => a.name === achievement.name);
      const html = `
        <div class="achievement-item ${isUnlocked ? '' : 'achievement-locked'}">
          <div class="achievement-icon">${achievement.icon}</div>
          <div class="achievement-name">${achievement.name}</div>
          <div class="achievement-description">${achievement.description}</div>
        </div>
      `;
      achievementsList.insertAdjacentHTML('beforeend', html);
    });
  }
  
  /**
   * –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
   * @param {string} period - –ø–µ—Ä–∏–æ–¥ ('daily', 'weekly', 'all-time')
   */
  async function loadLeaderboard(period) {
    try {
      uiService.showLoading();
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞
      const leaderboard = await apiService.getLeaderboard(period);
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
      if (leaderboard && leaderboard.length > 0) {
        renderLeaderboard(leaderboard);
      } else {
        document.getElementById('leaderboard-list').innerHTML = '<p class="text-secondary text-center">–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>';
      }
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userRank = await apiService.getUserPosition(period);
      document.getElementById('user-rank').textContent = userRank ? `#${userRank}` : 'N/A';

      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å–µ–¥–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
      if (period === 'all-time') {
        try {
          const neighborsData = await apiService.getUserNeighbors(5);
          
          if (neighborsData && neighborsData.success && neighborsData.neighbors && neighborsData.neighbors.length > 0) {
            renderNeighbors(neighborsData.neighbors);
            document.getElementById('neighbors-container').classList.remove('hidden');
          } else {
            document.getElementById('neighbors-container').classList.add('hidden');
          }
        } catch (neighborsError) {
          console.error('Error loading neighbors:', neighborsError);
          document.getElementById('neighbors-container').classList.add('hidden');
        }
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ —Å–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫ —Å —Å–æ—Å–µ–¥—è–º–∏
        document.getElementById('neighbors-container').classList.add('hidden');
      }
      
      uiService.hideLoading();
    } catch (error) {
      console.error('Error loading leaderboard:', error);
      uiService.hideLoading();
      uiService.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
  
  /**
   * –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
   * @param {Array} leaderboard - –º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –ª–∏–¥–µ—Ä–æ–≤
   */
  function renderLeaderboard(leaderboard) {
    const leaderboardList = document.getElementById('leaderboard-list');
    leaderboardList.innerHTML = '';
    
    leaderboard.forEach((item, index) => {
      const html = `
        <div class="leaderboard-item">
          <div class="rank">${index + 1}</div>
          <div class="user-avatar-small">
            ${item.photoUrl ? `<img src="${item.photoUrl}" alt="avatar">` : ''}
          </div>
          <div class="leaderboard-name">${item.username || '–ò–≥—Ä–æ–∫'}</div>
          <div class="leaderboard-score">${item.score}</div>
        </div>
      `;
      leaderboardList.insertAdjacentHTML('beforeend', html);
    });
  }
  
  /**
   * –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Å–µ–¥–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
   * @param {Array} neighbors - –º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ—Å–µ–¥–µ–π
   */
  function renderNeighbors(neighbors) {
    const neighborsList = document.getElementById('neighbors-list');
    neighborsList.innerHTML = '';
    
    neighbors.forEach((item) => {
      const html = `
        <div class="leaderboard-item ${item.isCurrent ? 'current-user' : ''}">
          <div class="rank">${item.position}</div>
          <div class="user-avatar-small">
            ${item.photoUrl ? `<img src="${item.photoUrl}" alt="avatar">` : ''}
          </div>
          <div class="leaderboard-name">${item.username || '–ò–≥—Ä–æ–∫'}</div>
          <div class="leaderboard-score">${item.score}</div>
        </div>
      `;
      neighborsList.insertAdjacentHTML('beforeend', html);
    });
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
  uiService.showScreen(startScreen);
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
  if (telegramService.getUserInfo()) {
    apiService.createOrUpdateUser(telegramService.getUserInfo())
      .catch(error => console.error('Error updating user profile:', error));
  }
  
  // –°–æ–∑–¥–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –∑–∞—Å—Ç–∞–≤–∫–∏
  createLogoSVG();
})

/**
 * –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è SVG –ª–æ–≥–æ—Ç–∏–ø–∞
 */
function createLogoSVG() {
  const logoUrl = 'src/assets/logo.svg';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
  fetch(logoUrl)
    .then(response => {
      if (!response.ok) {
        // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        createMockLogo();
      }
    })
    .catch(() => {
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ —Å–æ–∑–¥–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø
      createMockLogo();
    });
}

/**
 * –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ SVG –ª–æ–≥–æ—Ç–∏–ø–∞
 */
function createMockLogo() {
  // –¢–µ–∫—Å—Ç–æ–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø - –∑–∞–º–µ–Ω–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
  const svgLogo = `
    <svg xmlns="http://www.w3.org/2000/svg" width="120" height="120" viewBox="0 0 120 120">
      <circle cx="60" cy="60" r="55" fill="#1f1f1f" stroke="#ff4d4d" stroke-width="3"/>
      <text x="60" y="65" font-family="Arial" font-size="24" font-weight="bold" fill="#ff4d4d" text-anchor="middle">–ö–ë</text>
      <path d="M30,85 L90,85" stroke="#ff4d4d" stroke-width="2" />
      <path d="M35,95 L85,95" stroke="#ff4d4d" stroke-width="2" />
    </svg>
  `;
  
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∏ –º–µ–Ω—è–µ–º –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π SVG
  const logoImgs = document.querySelectorAll('.splash-logo img');
  logoImgs.forEach(img => {
    img.src = 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(svgLogo);
  });
} 