/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
 * –°–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
 */
const TelegramBot = require('node-telegram-bot-api');
const logger = require('../utils/logger');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const token = process.env.TELEGRAM_BOT_TOKEN;
let bot = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤
 */
const initializeBot = () => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if (!token) {
      logger.warn('Telegram bot token is not set, bot features will be disabled');
      return null;
    }

    if (process.env.NODE_ENV === 'production') {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º webhook –≤ production
      const domain = process.env.TELEGRAM_WEBHOOK_DOMAIN;
      
      if (!domain) {
        logger.error('Telegram webhook domain is not set in production mode');
        return null;
      }
      
      const webhookPath = `/telegram-webhook/${token}`;
      const webhookUrl = `${domain}${webhookPath}`;
      
      // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook
      bot = new TelegramBot(token);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
      bot.setWebHook(webhookUrl)
        .then(() => logger.info(`Telegram webhook set to ${webhookUrl}`))
        .catch(err => logger.error(`Error setting Telegram webhook: ${err.message}`));
      
      return {
        bot,
        webhookPath
      };
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º long polling –≤ development
      bot = new TelegramBot(token, { polling: true });
      logger.info('Telegram bot started in polling mode');
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
      bot.on('polling_error', (error) => {
        logger.error(`Telegram polling error: ${error.message}`);
      });
      
      return {
        bot,
        webhookPath: null
      };
    }
  } catch (error) {
    logger.error(`Error initializing Telegram bot: ${error.message}`);
    return null;
  }
};

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * @param {number} chatId - ID —á–∞—Ç–∞ (telegramId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
 * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {Object} options - –û–ø—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns {Promise<Object|null>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
const sendMessage = async (chatId, text, options = {}) => {
  try {
    if (!bot) {
      logger.warn('Trying to send message, but bot is not initialized');
      return null;
    }
    
    return await bot.sendMessage(chatId, text, options);
  } catch (error) {
    logger.error(`Error sending Telegram message: ${error.message}`);
    return null;
  }
};

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
 * @param {number} telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} achievement - –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object|null>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
const sendAchievementNotification = async (telegramId, achievement) => {
  if (!telegramId || !achievement) return null;
  
  const text = `üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!\n\n` +
    `<b>${achievement.name}</b>\n` +
    `${achievement.description}\n\n` +
    `–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ "–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–π –ë–ª–µ—Ñ", —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –±–æ–ª—å—à–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!`;
  
  return await sendMessage(telegramId, text, {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üéÆ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å', web_app: { url: process.env.TELEGRAM_WEB_APP_URL } }]
      ]
    }
  });
};

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∫–æ—Ä–¥–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
 * @param {number} telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {number} position - –ü–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
 * @param {string} period - –ü–µ—Ä–∏–æ–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞ ('daily', 'weekly', 'all-time')
 * @returns {Promise<Object|null>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
const sendLeaderboardNotification = async (telegramId, position, period) => {
  if (!telegramId || !position) return null;
  
  let periodText = '';
  switch (period) {
    case 'daily':
      periodText = '–¥–Ω–µ–≤–Ω–æ–º';
      break;
    case 'weekly':
      periodText = '–Ω–µ–¥–µ–ª—å–Ω–æ–º';
      break;
    case 'all-time':
      periodText = '–æ–±—â–µ–º';
      break;
    default:
      periodText = '–æ–±—â–µ–º';
  }
  
  const text = `üèÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–¥–Ω—è–ª–∏—Å—å –Ω–∞ ${position} –º–µ—Å—Ç–æ –≤ ${periodText} —Ä–µ–π—Ç–∏–Ω–≥–µ!\n\n` +
    `–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –ª—É—á—à–∏–º –¥–µ—Ç–µ–∫—Ç–∏–≤–æ–º!`;
  
  return await sendMessage(telegramId, text, {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üéÆ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å', web_app: { url: process.env.TELEGRAM_WEB_APP_URL } }],
        [{ text: 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥', web_app: { url: `${process.env.TELEGRAM_WEB_APP_URL}?start=leaderboard` } }]
      ]
    }
  });
};

/**
 * –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã –≤ –∫–∞–Ω–∞–ª
 * @param {Object} gameResult - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} user - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 * @returns {Promise<Object|null>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
const publishGameResultToChannel = async (gameResult, user) => {
  try {
    if (!bot) {
      logger.warn('Trying to publish to channel, but bot is not initialized');
      return null;
    }
    
    // ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const channelId = process.env.TELEGRAM_CHANNEL_ID;
    
    if (!channelId) {
      logger.warn('Telegram channel ID is not set, cannot publish game result');
      return null;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const text = `üïµÔ∏è‚Äç‚ôÇÔ∏è <b>–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥ –≤ –∏–≥—Ä–µ "–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–π –ë–ª–µ—Ñ"!</b>\n\n` +
      `–ò–≥—Ä–æ–∫: <b>${user.firstName} ${user.lastName || ''}</b>\n` +
      `–°—á–µ—Ç: <b>${gameResult.totalScore}</b> –æ—á–∫–æ–≤\n` +
      `–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>${gameResult.correctAnswers}/${gameResult.totalQuestions}</b>\n` +
      `–õ—É—á—à–∞—è —Å–µ—Ä–∏—è: <b>${gameResult.bestStreak}</b>\n\n` +
      `üéÆ –°–º–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –ø–æ–±–∏—Ç—å —ç—Ç–æ—Ç —Ä–µ–∫–æ—Ä–¥?`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
    const result = await bot.sendMessage(channelId, text, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üéÆ –ò–≥—Ä–∞—Ç—å', web_app: { url: process.env.TELEGRAM_WEB_APP_URL } }]
        ]
      }
    });
    
    logger.info(`Game result published to channel: ${channelId}, message ID: ${result.message_id}`);
    return result;
  } catch (error) {
    logger.error(`Error publishing game result to channel: ${error.message}`);
    return null;
  }
};

/**
 * –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª
 * @param {Object} achievement - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
 * @param {Object} user - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 * @returns {Promise<Object|null>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
const publishAchievementToChannel = async (achievement, user) => {
  try {
    if (!bot) {
      logger.warn('Trying to publish to channel, but bot is not initialized');
      return null;
    }
    
    // ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const channelId = process.env.TELEGRAM_CHANNEL_ID;
    
    if (!channelId) {
      logger.warn('Telegram channel ID is not set, cannot publish achievement');
      return null;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const text = `üèÜ <b>–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!</b>\n\n` +
      `–ò–≥—Ä–æ–∫ <b>${user.firstName} ${user.lastName || ''}</b> –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:\n\n` +
      `<b>${achievement.name}</b>\n` +
      `${achievement.description}\n\n` +
      `–ò–≥—Ä–∞–π—Ç–µ –≤ "–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–π –ë–ª–µ—Ñ" –∏ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
    const result = await bot.sendMessage(channelId, text, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üéÆ –ò–≥—Ä–∞—Ç—å', web_app: { url: process.env.TELEGRAM_WEB_APP_URL } }]
        ]
      }
    });
    
    logger.info(`Achievement published to channel: ${channelId}, message ID: ${result.message_id}`);
    return result;
  } catch (error) {
    logger.error(`Error publishing achievement to channel: ${error.message}`);
    return null;
  }
};

/**
 * –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –≤ –∫–∞–Ω–∞–ª
 * @param {Array} leaderboard - –¢–æ–ø-3 –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
 * @param {string} type - –¢–∏–ø –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ ('daily', 'weekly', 'all-time')
 * @returns {Promise<Object|null>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
const publishLeaderboardToChannel = async (leaderboard, type = 'weekly') => {
  try {
    if (!bot) {
      logger.warn('Trying to publish to channel, but bot is not initialized');
      return null;
    }
    
    // ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const channelId = process.env.TELEGRAM_CHANNEL_ID;
    
    if (!channelId) {
      logger.warn('Telegram channel ID is not set, cannot publish leaderboard');
      return null;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    let titleText = '';
    switch (type) {
      case 'daily':
        titleText = '–¥–Ω–µ–≤–Ω–æ–≥–æ';
        break;
      case 'weekly':
        titleText = '–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ';
        break;
      case 'all-time':
        titleText = '–æ–±—â–µ–≥–æ';
        break;
      default:
        titleText = '–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ';
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–æ–ø-3 –ª–∏–¥–µ—Ä–∞–º–∏
    let leaderboardText = '';
    leaderboard.forEach((item, index) => {
      const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : 'ü•â';
      leaderboardText += `${medal} <b>${item.firstName} ${item.lastName || ''}</b> - ${item.score} –æ—á–∫–æ–≤\n`;
    });
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const text = `üìä <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${titleText} —Ä–µ–π—Ç–∏–Ω–≥–∞ "–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–π –ë–ª–µ—Ñ"</b>\n\n` +
      `–¢–æ–ø-3 –∏–≥—Ä–æ–∫–∞:\n${leaderboardText}\n` +
      `–ò–≥—Ä–∞–π—Ç–µ –∏ –ø–æ–¥–Ω–∏–º–∞–π—Ç–µ—Å—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
    const result = await bot.sendMessage(channelId, text, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üéÆ –ò–≥—Ä–∞—Ç—å', web_app: { url: process.env.TELEGRAM_WEB_APP_URL } }],
          [{ text: 'üìä –ü–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥', web_app: { url: `${process.env.TELEGRAM_WEB_APP_URL}?start=leaderboard` } }]
        ]
      }
    });
    
    logger.info(`Leaderboard published to channel: ${channelId}, message ID: ${result.message_id}`);
    return result;
  } catch (error) {
    logger.error(`Error publishing leaderboard to channel: ${error.message}`);
    return null;
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –æ–±—ä–µ–∫—Ç—ã
module.exports = {
  initializeBot,
  sendMessage,
  sendAchievementNotification,
  sendLeaderboardNotification,
  publishGameResultToChannel,
  publishAchievementToChannel,
  publishLeaderboardToChannel
}; 