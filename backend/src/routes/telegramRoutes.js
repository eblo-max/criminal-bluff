/**
 * –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è Telegram –≤–µ–±—Ö—É–∫–æ–≤
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫–∏ –æ—Ç Telegram
 */
const express = require('express');
const router = express.Router();
const telegramConfig = require('../config/telegram');
const logger = require('../utils/logger');
const { User } = require('../models');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const botConfig = telegramConfig.initializeBot();

// –ï—Å–ª–∏ –±–æ—Ç –∏ –ø—É—Ç—å –≤–µ–±—Ö—É–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
if (botConfig && botConfig.bot && botConfig.webhookPath) {
  const { bot, webhookPath } = botConfig;
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram
   */
  router.post(webhookPath, async (req, res) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
      if (!req.body) {
        return res.status(400).json({ success: false, message: 'Invalid webhook data' });
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      await processUpdate(req.body);
      
      return res.status(200).json({ success: true });
    } catch (error) {
      logger.error(`Error processing Telegram webhook: ${error.message}`);
      return res.status(500).json({ success: false, message: 'Internal server error' });
    }
  });
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–µ–∂–∏–º–∞ long polling
  setupBotHandlers(bot);
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
 */
function setupBotHandlers(bot) {
  if (!bot) return;
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from.username || `user_${msg.from.id}`;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
      const user = await User.findOne({ telegramId: msg.from.id });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const text = user 
        ? `–ü—Ä–∏–≤–µ—Ç, ${user.firstName || username}! –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞! üïµÔ∏è‚Äç‚ôÇÔ∏è`
        : `–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–π –ë–ª–µ—Ñ"! üïµÔ∏è‚Äç‚ôÇÔ∏è`;
      
      const options = {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéÆ –ò–≥—Ä–∞—Ç—å', web_app: { url: process.env.TELEGRAM_WEB_APP_URL } }]
          ]
        }
      };
      
      await bot.sendMessage(chatId, text, options);
    } catch (error) {
      logger.error(`Error handling /start command: ${error.message}`);
      await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats
  bot.onText(/\/stats/, async (msg) => {
    const chatId = msg.chat.id;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
      const user = await User.findOne({ telegramId: msg.from.id });
      
      if (!user) {
        return await bot.sendMessage(chatId, '–í—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª–∏ –≤ "–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–π –ë–ª–µ—Ñ". –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!');
      }
      
      // –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
      const correctPercentage = user.gamesPlayed > 0 
        ? Math.round((user.correctAnswers / (user.gamesPlayed * 5)) * 100) 
        : 0;
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const text = `üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n` +
        `üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: <b>${user.gamesPlayed}</b>\n` +
        `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>${user.correctAnswers}</b>\n` +
        `üìà –¢–æ—á–Ω–æ—Å—Ç—å: <b>${correctPercentage}%</b>\n` +
        `üî• –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: <b>${user.bestStreak}</b>\n` +
        `üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: <b>${user.achievements.length}</b>\n`;
      
      const options = {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéÆ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å', web_app: { url: process.env.TELEGRAM_WEB_APP_URL } }],
            [{ text: 'üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', web_app: { url: `${process.env.TELEGRAM_WEB_APP_URL}?start=profile` } }]
          ]
        }
      };
      
      await bot.sendMessage(chatId, text, options);
    } catch (error) {
      logger.error(`Error handling /stats command: ${error.message}`);
      await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /leaderboard
  bot.onText(/\/leaderboard/, async (msg) => {
    const chatId = msg.chat.id;
    
    try {
      await bot.sendMessage(chatId, 'üìä <b>–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤</b>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥:', {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìä –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–π—Ç–∏–Ω–≥', web_app: { url: `${process.env.TELEGRAM_WEB_APP_URL}?start=leaderboard` } }]
          ]
        }
      });
    } catch (error) {
      logger.error(`Error handling /leaderboard command: ${error.message}`);
      await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
  bot.onText(/\/help/, async (msg) => {
    const chatId = msg.chat.id;
    
    const text = `üìñ <b>–ü–æ–º–æ—â—å</b>\n\n` +
      `"–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–π –ë–ª–µ—Ñ" - —ç—Ç–æ –∏–≥—Ä–∞-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —á–∏—Ç–∞–µ—Ç–µ –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∏—â–µ—Ç–µ –æ—à–∏–±–∫–∏ –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–æ–≤.\n\n` +
      `<b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>\n` +
      `- –û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞—Ç—å"\n` +
      `- –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é\n` +
      `- –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∞—è –¥–µ—Ç–∞–ª—å —è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–∞\n` +
      `- –û—Ç–≤–µ—á–∞–π—Ç–µ –±—ã—Å—Ç—Ä–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤!\n\n` +
      `<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n` +
      `/start - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n` +
      `/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n` +
      `/leaderboard - —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n` +
      `/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞`;
    
    await bot.sendMessage(chatId, text, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üéÆ –ò–≥—Ä–∞—Ç—å', web_app: { url: process.env.TELEGRAM_WEB_APP_URL } }]
        ]
      }
    });
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  bot.on('web_app_data', async (msg) => {
    try {
      const chatId = msg.chat.id;
      const data = JSON.parse(msg.web_app_data.data);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è "share_results"
      if (data.action === 'share_results') {
        await bot.sendMessage(chatId, data.text);
      }
    } catch (error) {
      logger.error(`Error processing web_app_data: ${error.message}`);
    }
  });
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
 * @param {Object} update - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
 */
async function processUpdate(update) {
  try {
    if (!botConfig || !botConfig.bot) return;
    
    const bot = botConfig.bot;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç webhook –ø–µ—Ä–µ–¥–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    bot.processUpdate(update);
  } catch (error) {
    logger.error(`Error processing update: ${error.message}`);
  }
}

module.exports = router; 