const mongoose = require('mongoose');

const achievementSchema = new mongoose.Schema({
  id: {
    type: String,
    required: true,
    unique: true
  },
  name: {
    type: String,
    required: true
  },
  description: {
    type: String,
    required: true
  },
  category: {
    type: String,
    enum: ['gameplay', 'accuracy', 'streak', 'social', 'meta'],
    required: true
  },
  icon: {
    type: String,
    required: true
  },
  rarity: {
    type: String,
    enum: ['common', 'uncommon', 'rare', 'epic', 'legendary'],
    required: true
  },
  points: {
    type: Number,
    required: true,
    min: 0
  },
  requirement: {
    type: {
      type: String,
      enum: ['single', 'progress', 'multi'],
      required: true
    },
    target: {
      type: Number,
      required: true
    },
    conditions: [{
      field: String,
      operator: String,
      value: mongoose.Schema.Types.Mixed
    }]
  },
  rewards: {
    score: Number,
    title: String,
    badge: String
  },
  secret: {
    type: Boolean,
    default: false
  },
  active: {
    type: Boolean,
    default: true
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
});

// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
const ACHIEVEMENTS = {
  // –ò–≥—Ä–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  FIRST_GAME: {
    id: 'first_game',
    name: '–ü–µ—Ä–≤–æ–µ –¥–µ–ª–æ',
    description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∏–≥—Ä—É',
    category: 'gameplay',
    icon: 'üéÆ',
    rarity: 'common',
    points: 50,
    requirement: {
      type: 'single',
      target: 1,
      conditions: [{
        field: 'gamesPlayed',
        operator: '>=',
        value: 1
      }]
    }
  },
  PERFECT_GAME: {
    id: 'perfect_game',
    name: '–ë–µ–∑—É–ø—Ä–µ—á–Ω–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
    description: '–ü–æ–ª—É—á–∏—Ç–µ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –æ–¥–Ω–æ–π –∏–≥—Ä–µ',
    category: 'accuracy',
    icon: 'üíØ',
    rarity: 'rare',
    points: 200,
    requirement: {
      type: 'single',
      target: 1,
      conditions: [{
        field: 'isPerfect',
        operator: '==',
        value: true
      }]
    }
  },
  SPEED_DEMON: {
    id: 'speed_demon',
    name: '–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è –¥–µ–¥—É–∫—Ü–∏—è',
    description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–≥—Ä—É —Å–æ —Å—Ä–µ–¥–Ω–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–µ 3 —Å–µ–∫—É–Ω–¥',
    category: 'speed',
    icon: '‚ö°',
    rarity: 'epic',
    points: 150,
    requirement: {
      type: 'single',
      target: 1,
      conditions: [{
        field: 'averageTime',
        operator: '<',
        value: 3000
      }]
    }
  },
  STREAK_MASTER: {
    id: 'streak_master',
    name: '–ú–∞—Å—Ç–µ—Ä —Å–µ—Ä–∏–π',
    description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Å–µ—Ä–∏–∏ –∏–∑ 10 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤',
    category: 'streak',
    icon: 'üî•',
    rarity: 'rare',
    points: 100,
    requirement: {
      type: 'single',
      target: 10,
      conditions: [{
        field: 'streak',
        operator: '>=',
        value: 10
      }]
    }
  },
  VETERAN: {
    id: 'veteran',
    name: '–í–µ—Ç–µ—Ä–∞–Ω',
    description: '–°—ã–≥—Ä–∞–π—Ç–µ 100 –∏–≥—Ä',
    category: 'meta',
    icon: 'üèÖ',
    rarity: 'epic',
    points: 300,
    requirement: {
      type: 'progress',
      target: 100,
      conditions: [{
        field: 'gamesPlayed',
        operator: '>=',
        value: 100
      }]
    }
  },
  ACCURACY_KING: {
    id: 'accuracy_king',
    name: '–ö–æ—Ä–æ–ª—å —Ç–æ—á–Ω–æ—Å—Ç–∏',
    description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 95% —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ 50 –∏–≥—Ä',
    category: 'accuracy',
    icon: 'üëë',
    rarity: 'legendary',
    points: 500,
    requirement: {
      type: 'multi',
      target: 1,
      conditions: [
        {
          field: 'accuracy',
          operator: '>=',
          value: 95
        },
        {
          field: 'gamesPlayed',
          operator: '>=',
          value: 50
        }
      ]
    }
  },
  DAILY_DETECTIVE: {
    id: 'daily_detective',
    name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤',
    description: '–ò–≥—Ä–∞–π—Ç–µ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
    category: 'meta',
    icon: 'üìÖ',
    rarity: 'uncommon',
    points: 150,
    requirement: {
      type: 'progress',
      target: 7,
      conditions: [{
        field: 'dailyStreak',
        operator: '>=',
        value: 7
      }]
    }
  },
  SOCIAL_BUTTERFLY: {
    id: 'social_butterfly',
    name: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞',
    description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 5 –¥—Ä—É–∑–µ–π –≤ –∏–≥—Ä—É',
    category: 'social',
    icon: 'ü¶ã',
    rarity: 'rare',
    points: 200,
    requirement: {
      type: 'progress',
      target: 5,
      conditions: [{
        field: 'invitedFriends',
        operator: '>=',
        value: 5
      }]
    }
  },
  NIGHT_OWL: {
    id: 'night_owl',
    name: '–ù–æ—á–Ω–∞—è —Å–æ–≤–∞',
    description: '–°—ã–≥—Ä–∞–π—Ç–µ 10 –∏–≥—Ä –º–µ–∂–¥—É 00:00 –∏ 04:00',
    category: 'meta',
    icon: 'ü¶â',
    rarity: 'uncommon',
    points: 100,
    requirement: {
      type: 'progress',
      target: 10,
      conditions: [{
        field: 'nightGames',
        operator: '>=',
        value: 10
      }]
    },
    secret: true
  }
};

// –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
achievementSchema.index({ id: 1 }, { unique: true });
achievementSchema.index({ category: 1 });
achievementSchema.index({ rarity: 1 });
achievementSchema.index({ active: 1 });

const Achievement = mongoose.model('Achievement', achievementSchema);

module.exports = {
  Achievement,
  ACHIEVEMENTS
}; 