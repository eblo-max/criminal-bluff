const { User, Story } = require('../models');
const { AppError } = require('../middlewares/errorMiddleware');
const cacheService = require('./cacheService');
const leaderboardService = require('./leaderboardService');
const logger = require('../utils/logger');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤
const POINTS = {
  BASE: 100,
  TIME_BONUS_MAX: 50,
  STREAK_BONUS: 20,
  PERFECT_GAME_BONUS: 500
};

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const ACHIEVEMENTS = {
  FIRST_GAME: { id: 'first_game', points: 50 },
  PERFECT_GAME: { id: 'perfect_game', points: 200 },
  SPEED_DEMON: { id: 'speed_demon', points: 150 },
  STREAK_MASTER: { id: 'streak_master', points: 100 },
  VETERAN: { id: 'veteran', points: 300 }
};

// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–Ω–≥–æ–≤
const RANKS = {
  ROOKIE: { name: '–ù–æ–≤–∏—á–æ–∫', minScore: 0, color: '#808080', icon: 'üë∂' },
  DETECTIVE: { name: '–î–µ—Ç–µ–∫—Ç–∏–≤', minScore: 1000, color: '#4CAF50', icon: 'üîç' },
  INVESTIGATOR: { name: '–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', minScore: 5000, color: '#2196F3', icon: 'üïµÔ∏è' },
  INSPECTOR: { name: '–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä', minScore: 10000, color: '#9C27B0', icon: 'üëÆ' },
  COMMISSIONER: { name: '–ö–æ–º–∏—Å—Å–∞—Ä', minScore: 25000, color: '#FF9800', icon: 'üéñÔ∏è' },
  SUPERINTENDENT: { name: '–°—É–ø–µ—Ä–∏–Ω—Ç–µ–Ω–¥–∞–Ω—Ç', minScore: 50000, color: '#F44336', icon: '‚≠ê' },
  CHIEF: { name: '–®–µ—Ñ –ø–æ–ª–∏—Ü–∏–∏', minScore: 100000, color: '#FFD700', icon: 'üëë' },
  LEGEND: { name: '–õ–µ–≥–µ–Ω–¥–∞', minScore: 250000, color: '#E91E63', icon: 'üèÜ' }
};

/**
 * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const calculateRank = async (score) => {
  try {
    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥
    const ranks = Object.values(RANKS).sort((a, b) => b.minScore - a.minScore);
    const currentRank = ranks.find(rank => score >= rank.minScore);
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–Ω–≥
    const nextRankIndex = ranks.findIndex(r => r.name === currentRank.name) + 1;
    const nextRank = nextRankIndex < ranks.length ? ranks[nextRankIndex] : null;

    // –°—á–∏—Ç–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    let progress = 100;
    if (nextRank) {
      progress = Math.round(
        ((score - currentRank.minScore) / (nextRank.minScore - currentRank.minScore)) * 100
      );
    }

    return {
      current: {
        name: currentRank.name,
        color: currentRank.color,
        icon: currentRank.icon,
        minScore: currentRank.minScore
      },
      next: nextRank ? {
        name: nextRank.name,
        color: nextRank.color,
        icon: nextRank.icon,
        minScore: nextRank.minScore,
        pointsNeeded: nextRank.minScore - score
      } : null,
      progress,
      score
    };
  } catch (err) {
    logger.error(`Error calculating rank: ${err.message}`);
    throw err;
  }
};

/**
 * –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
 */
const unlockAchievement = async (userId, achievementId) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –ª–∏ —É–∂–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    const user = await User.findById(userId);
    if (!user || user.achievements.some(a => a.id === achievementId)) {
      return null;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
    const achievement = ACHIEVEMENTS[achievementId];
    if (!achievement) {
      throw new AppError('–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 404);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    const newAchievement = {
      id: achievement.id,
      unlockedAt: new Date()
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await User.findByIdAndUpdate(userId, {
      $push: { achievements: newAchievement },
      $inc: { score: achievement.points }
    });

    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø—Ä–æ—Ñ–∏–ª—è
    await cacheService.invalidateUserProfile(userId);

    return newAchievement;
  } catch (err) {
    logger.error(`Error unlocking achievement: ${err.message}`);
    throw err;
  }
};

/**
 * –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É
 */
const finishGame = async (userId, gameSession) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
    if (gameSession.status !== 'completed') {
      throw new AppError('–ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 400);
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findById(userId);
    if (!user) {
      throw new AppError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 404);
    }

    // –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã
    const stats = {
      totalScore: gameSession.totalScore,
      correctAnswers: gameSession.answers.filter(a => a.isCorrect).length,
      bestStreak: Math.max(...gameSession.answers.map(a => a.streak)),
      averageTime: Math.round(
        gameSession.answers.reduce((sum, a) => sum + a.timeSpent, 0) / gameSession.answers.length
      ),
      isPerfect: gameSession.answers.every(a => a.isCorrect)
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∑–∞ –∏–¥–µ–∞–ª—å–Ω—É—é –∏–≥—Ä—É
    if (stats.isPerfect) {
      stats.totalScore += POINTS.PERFECT_GAME_BONUS;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updates = {
      $inc: {
        score: stats.totalScore,
        gamesPlayed: 1,
        correctAnswers: stats.correctAnswers
      },
      $max: { bestStreak: stats.bestStreak },
      $set: { 
        lastGameAt: new Date(),
        averageAnswerTime: Math.round(
          ((user.averageAnswerTime || 0) * user.gamesPlayed + stats.averageTime) / (user.gamesPlayed + 1)
        )
      }
    };

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∏–≥—Ä–∞
    if (user.gamesPlayed === 0) {
      await unlockAchievement(userId, ACHIEVEMENTS.FIRST_GAME.id);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –∏–¥–µ–∞–ª—å–Ω—É—é –∏–≥—Ä—É
    if (stats.isPerfect) {
      await unlockAchievement(userId, ACHIEVEMENTS.PERFECT_GAME.id);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å
    if (stats.averageTime < 3000) {
      await unlockAchievement(userId, ACHIEVEMENTS.SPEED_DEMON.id);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ —Å–µ—Ä–∏—é
    if (stats.bestStreak >= 10) {
      await unlockAchievement(userId, ACHIEVEMENTS.STREAK_MASTER.id);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤–µ—Ç–µ—Ä–∞–Ω–∞
    if (user.gamesPlayed >= 100) {
      await unlockAchievement(userId, ACHIEVEMENTS.VETERAN.id);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await User.findByIdAndUpdate(userId, updates, { new: true });

    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–Ω–≥
    const rankData = await calculateRank(updatedUser.score);

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–Ω–≥–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats.newRank = rankData;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
    await Promise.all([
      cacheService.invalidateUserProfile(userId),
      cacheService.invalidateLeaderboardCache('all-time'),
      cacheService.invalidateLeaderboardCache('daily'),
      cacheService.invalidateLeaderboardCache('weekly'),
      cacheService.invalidateLeaderboardCache('monthly')
    ]);

    return stats;
  } catch (err) {
    logger.error(`Error finishing game: ${err.message}`);
    throw err;
  }
};

/**
 * –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
 */
const startNewGame = async (userId) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏
    const stories = await Story.aggregate([
      { $match: { active: true } },
      { $sample: { size: 5 } },
      { $project: { _id: 1, text: 1, options: 1, category: 1, difficulty: 1 } }
    ]);

    if (stories.length < 5) {
      throw new AppError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏–π –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã', 400);
    }

    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
    const gameSession = {
      userId,
      stories: stories.map(s => s._id),
      answers: [],
      streak: 0,
      totalScore: 0,
      status: 'active',
      startedAt: new Date()
    };

    return {
      session: gameSession,
      stories
    };
  } catch (err) {
    logger.error(`Error starting new game: ${err.message}`);
    throw err;
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const processAnswer = async (userId, storyId, selectedAnswer, timeSpent, gameSession) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!gameSession.stories.includes(storyId)) {
      throw new AppError('–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏', 400);
    }

    if (timeSpent < 0 || timeSpent > 60000) {
      throw new AppError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞', 400);
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    const story = await Story.findById(storyId);
    if (!story) {
      throw new AppError('–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 404);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    const isCorrect = story.correctAnswer === selectedAnswer;
    
    // –°—á–∏—Ç–∞–µ–º –æ—á–∫–∏
    let points = 0;
    if (isCorrect) {
      // –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏
      points += POINTS.BASE;
      
      // –ë–æ–Ω—É—Å –∑–∞ –≤—Ä–µ–º—è (–º–∞–∫—Å–∏–º—É–º –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –¥–æ 5 —Å–µ–∫—É–Ω–¥)
      const timeBonus = Math.max(0, POINTS.TIME_BONUS_MAX * (1 - timeSpent / 5000));
      points += Math.round(timeBonus);
      
      // –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é
      if (gameSession.streak > 0) {
        points += POINTS.STREAK_BONUS * Math.min(5, gameSession.streak);
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
    gameSession.answers.push({
      storyId,
      selectedAnswer,
      isCorrect,
      timeSpent,
      points
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    if (isCorrect) {
      gameSession.streak++;
      gameSession.totalScore += points;
    } else {
      gameSession.streak = 0;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
    if (gameSession.answers.length === gameSession.stories.length) {
      gameSession.status = 'completed';
      await finishGame(userId, gameSession);
    }

    // –ö—ç—à–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    await cacheService.cacheGameSession(userId, gameSession);

    return {
      isCorrect,
      points,
      streak: gameSession.streak,
      totalScore: gameSession.totalScore,
      isCompleted: gameSession.status === 'completed'
    };
  } catch (err) {
    logger.error(`Error processing answer: ${err.message}`);
    throw err;
  }
};

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ —Ä–∞–∑–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
const calculateRating = async (user, type = 'score') => {
  try {
    switch (type) {
      case 'score':
        return {
          value: user.score,
          label: '–û–±—â–∏–π —Å—á–µ—Ç'
        };
      
      case 'accuracy':
        const accuracy = user.gamesPlayed > 0 
          ? Math.round((user.correctAnswers / (user.gamesPlayed * 5)) * 100)
          : 0;
        return {
          value: accuracy,
          label: '–¢–æ—á–Ω–æ—Å—Ç—å',
          suffix: '%'
        };
      
      case 'speed':
        return {
          value: user.averageAnswerTime || 0,
          label: '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è',
          suffix: '–º—Å'
        };
      
      case 'streak':
        return {
          value: user.bestStreak || 0,
          label: '–õ—É—á—à–∞—è —Å–µ—Ä–∏—è'
        };
      
      case 'achievements':
        return {
          value: user.achievements.length,
          label: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è'
        };
      
      default:
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞');
    }
  } catch (err) {
    logger.error(`Error calculating rating: ${err.message}`);
    throw err;
  }
};

module.exports = {
  processAnswer,
  finishGame,
  startNewGame,
  unlockAchievement,
  calculateRank,
  calculateRating,
  POINTS,
  ACHIEVEMENTS,
  RANKS
}; 