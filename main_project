# Техническое задание для Telegram Mini App "Криминальный Блеф"

## 1. Общее описание проекта

Криминальный Блеф - это игра-викторина в формате Telegram Mini App, где пользователи угадывают ошибки преступников в реальных историях. Игроки читают короткие криминальные истории и выбирают, какая деталь является ошибкой преступника.

## 2. Технологический стек

- **Frontend**: HTML5, CSS3, JavaScript (без фреймворков для простоты)
- **Backend**: Node.js, Express.js
- **База данных**: MongoDB
- **Кэширование**: Redis (для рейтингов)
- **Telegram интеграция**: node-telegram-bot-api

## 3. Структура базы данных

### 3.1 Коллекция `stories`

```javascript
{
  id: String,            // уникальный идентификатор
  text: String,          // текст истории
  options: Array,        // 3 варианта ответа
  correctAnswer: Number, // индекс правильного ответа 0-2
  explanation: String,   // объяснение правильного ответа
  difficulty: String,    // "easy", "medium", "hard"
  category: String,      // "serial_killers", "bank_robbers", "cybercrime", etc.
  createdAt: Date
}
```

### 3.2 Коллекция `users`

```javascript
{
  telegramId: Number,     // ID пользователя в Telegram
  username: String,       // Имя пользователя
  score: Number,          // Общее количество очков
  gamesPlayed: Number,    // Количество сыгранных игр
  correctAnswers: Number, // Количество правильных ответов
  bestStreak: Number,     // Лучшая серия правильных ответов
  currentStreak: Number,  // Текущая серия правильных ответов
  lastPlayed: Date,       // Дата последней игры
  achievements: Array,    // Массив полученных достижений
  createdAt: Date        // Дата создания профиля
}
```

### 3.3 Коллекция `leaderboard`

```javascript
{
  userId: ObjectId,      // ссылка на коллекцию users
  score: Number,         // количество очков
  period: String,        // "daily", "weekly", "all-time"
  updatedAt: Date        // дата обновления
}
```

## 4. Игровой процесс

### 4.1 Стартовый экран

- Приветственное сообщение
- Кнопка "Начать игру"
- Кнопка "Мой профиль"
- Кнопка "Рейтинг"

### 4.2 Игровой экран

- Отображение истории (текст до 200 символов)
- Три кнопки с вариантами ответов
- Таймер 15 секунд
- Счетчик правильных ответов
- Индикатор прогресса (X из 5 историй)

### 4.3 Результат ответа

- Правильный/неправильный ответ
- Объяснение (всплывающее окно)
- Кнопка "Следующая история"
- Обновление счета

### 4.4 Экран результатов

- Количество правильных ответов
- Заработанные очки
- Текущая серия правильных ответов
- Кнопка "Играть снова"
- Кнопка "Поделиться результатом"

### 4.5 Экран профиля

Статистика игрока:
- Всего игр
- Процент правильных ответов
- Лучшая серия
- Позиция в рейтинге
- Достижения

### 4.6 Экран рейтинга

- Вкладки: Сегодня / Неделя / Все время
- Топ-100 игроков
- Позиция текущего игрока

## 5. API эндпоинты

### 5.1 Игровые эндпоинты

```
GET /api/game/start - получить 5 случайных историй
POST /api/game/answer - отправить ответ и получить результат
POST /api/game/finish - завершить игру и сохранить результат
```

### 5.2 Пользовательские эндпоинты

```
POST /api/user/create - создать/обновить пользователя
GET /api/user/profile/:telegramId - получить профиль
GET /api/user/achievements/:telegramId - получить достижения
```

### 5.3 Рейтинговые эндпоинты

```
GET /api/leaderboard/daily - дневной рейтинг
GET /api/leaderboard/weekly - недельный рейтинг
GET /api/leaderboard/all-time - общий рейтинг
```

## 6. Система начисления очков

- Правильный ответ: +100 очков
- Бонус за скорость: до +50 очков (чем быстрее, тем больше)
- Серия правильных ответов:
  - 3 подряд: +50 бонус
  - 5 подряд: +100 бонус
  - 10 подряд: +250 бонус

## 7. Достижения

- "Новичок" - сыграть первую игру
- "Эксперт" - 10 правильных ответов подряд
- "Мастер дедукции" - 100% точность в 5 играх подряд
- "Скоростной детектив" - правильный ответ за 3 секунды
- "Серийный игрок" - 100 сыгранных игр

## 8. Безопасность

- JWT токены для авторизации
- Rate limiting для API
- Валидация данных от пользователя
- Защита от многократной отправки ответов

## 9. Интеграция с Telegram

- Авторизация через Telegram WebApp API
- Уведомления через бота о новых достижениях
- Публикация результатов в канал (опционально)
- Inline кнопки для шаринга результатов

## 10. Административная панель

- Добавление новых историй
- Модерация контента
- Просмотр статистики
- Управление пользователями

## 11. Оптимизация

- Кэширование историй в Redis
- Пагинация для рейтингов
- Сжатие ответов (gzip)
- Минификация фронтенд ассетов

## 12. Этапы разработки

1. Настройка проекта и базовая структура
2. Реализация авторизации через Telegram
3. Создание игровой логики
4. Разработка фронтенда
5. Интеграция с базой данных
6. Реализация системы рейтингов
7. Добавление достижений
8. Тестирование и оптимизация
9. Деплой и мониторинг

## 13. Дополнительные требования

### 13.1 Дизайн и UX

- Современный темный дизайн с неоновыми акцентами
- Анимации переходов между экранами
- Адаптивный интерфейс под разные размеры экранов
- Тактильная обратная связь при нажатиях
- Индикаторы загрузки

### 13.2 Производительность

- Время загрузки приложения не более 2 секунд
- Плавная анимация на устройствах низкого уровня
- Минимальное потребление памяти
- Кэширование статических ресурсов

### 13.3 Аналитика

- Отслеживание времени сессии
- Подсчет завершенных игр
- Анализ популярных категорий историй
- Мониторинг ошибок и сбоев

### 13.4 Монетизация (опционально)

- Премиум-подписка без рекламы
- Покупка дополнительных жизней
- Эксклюзивные категории историй

## 14. Требования к серверной инфраструктуре

- Node.js версии 18+
- MongoDB версии 5+
- Redis версии 6+
- Nginx как reverse proxy
- SSL сертификат для HTTPS
- Система мониторинга (PM2)

## 15. Документация

- API документация (Swagger/OpenAPI)
- Руководство по развертыванию
- Инструкции для администратора
- Руководство по добавлению контента

## 16. Тестирование

- Unit тесты для основных функций
- Интеграционные тесты API
- E2E тесты игрового процесса
- Нагрузочное тестирование
- Тестирование безопасности

## 17. Деплой на Railway

### 17.1 Преимущества Railway для проекта

- Полная поддержка Node.js/Express бэкенда
- Встроенные сервисы MongoDB и Redis
- Автоматический SSL и домены
- CI/CD из GitHub
- Простое масштабирование
- Мониторинг и логирование в реальном времени
- Бесплатный план для MVP

### 17.2 Конфигурация Railway

#### Структура проекта для Railway:
```
criminal-bluff/
├── backend/         # Node.js/Express сервер
├── frontend/        # Статические файлы фронтенда
├── railway.json     # Конфигурация Railway
└── package.json     # Корневой package.json
```

#### railway.json:
```json
{
  "$schema": "https://railway.app/railway.schema.json",
  "build": {
    "builder": "NIXPACKS"
  },
  "deploy": {
    "startCommand": "cd backend && npm start",
    "restartPolicyType": "ON_FAILURE",
    "restartPolicyMaxRetries": 10
  }
}
```

### 17.3 Необходимые сервисы в Railway

1. **Backend Service** (Node.js/Express)
   - Автоматический build и deploy
   - Environment variables
   - Мониторинг памяти и CPU

2. **MongoDB Plugin**
   - Автоматическое создание базы данных
   - Бэкапы
   - Connection string в environment variables

3. **Redis Plugin**
   - Для кэширования и рейтингов
   - Автоматическая конфигурация

4. **Frontend Static Site**
   - Хостинг статических файлов
   - CDN для быстрой загрузки

### 17.4 Environment Variables для Railway

```
# Production
NODE_ENV=production
PORT=3000

# Database
MONGODB_URI=<автоматически от Railway>
REDIS_URL=<автоматически от Railway>

# Security
JWT_SECRET=<secure_random_string>

# Telegram Integration
TELEGRAM_BOT_TOKEN=<bot_token>
TELEGRAM_WEBHOOK_DOMAIN=<railway_domain>

# Monitoring
SENTRY_DSN=<optional>
```

### 17.5 Процесс деплоя

1. Подключение GitHub репозитория к Railway
2. Создание нового проекта в Railway
3. Добавление сервисов (Backend, MongoDB, Redis)
4. Настройка environment variables
5. Автоматический деплой при push в main ветку
6. Мониторинг логов и метрик

### 17.6 Масштабирование

- Горизонтальное масштабирование бэкенда
- Увеличение ресурсов для баз данных
- Добавление реплик для высокой доступности
- Настройка автоскейлинга на платном плане

## 18. Сроки и бюджет

- Разработка MVP: 4-6 недель
- Тестирование и отладка: 2 недели
- Подготовка к запуску: 1 неделя
- Общий срок: 2 месяца
- Бюджет: определяется исходя из почасовой ставки разработчиков

---

*Это техническое задание может быть дополнено и изменено в процессе обсуждения с командой разработки.*